{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red26\green26\blue41;\red172\green172\blue193;
\red167\green197\blue152;\red212\green212\blue212;\red79\green123\blue61;\red45\green175\blue118;\red31\green133\blue64;
\red140\green108\blue11;\red253\green181\blue13;\red237\green114\blue173;\red13\green102\blue149;\red14\green86\blue166;
\red194\green126\blue101;\red187\green97\blue44;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c13333\c13725\c21176;\cssrgb\c72941\c73333\c80000;
\cssrgb\c70980\c80784\c65882;\cssrgb\c86275\c86275\c86275;\cssrgb\c37647\c54510\c30588;\cssrgb\c19608\c72941\c53725;\cssrgb\c12941\c58039\c31765;
\cssrgb\c61961\c49412\c3137;\cssrgb\c100000\c75686\c2745;\cssrgb\c95294\c54118\c73333;\cssrgb\c0\c47843\c65098;\cssrgb\c3137\c42353\c70980;
\cssrgb\c80784\c56863\c47059;\cssrgb\c78824\c45882\c22353;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pragma\cf4 \strokec4  \cf2 \strokec2 solidity\cf4 \strokec4  \cf5 \strokec5 0.5.16\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 interface IBEP20 \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the amount of tokens in existence.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  totalSupply\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the token decimals.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  decimals\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint8\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the token symbol.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  symbol\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7   * @dev Returns the token name.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  name\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the bep token owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  getOwner\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the amount of tokens owned by `account`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  balanceOf\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  account\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Moves `amount` tokens from the caller's account to `recipient`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Returns a boolean value indicating whether the operation succeeded.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits a \{Transfer\} event.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  transfer\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the remaining number of tokens that `spender` will be\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * allowed to spend on behalf of `owner` through \{transferFrom\}. This is\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * zero by default.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * This value changes when \{approve\} or \{transferFrom\} are called.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  allowance\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  _owner\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Returns a boolean value indicating whether the operation succeeded.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * IMPORTANT: Beware that changing an allowance with this method brings the risk\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * that someone may use both the old and the new allowance by unfortunate\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * transaction ordering. One possible solution to mitigate this race\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * condition is to first reduce the spender's allowance to 0 and set the\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * desired value afterwards:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits an \{Approval\} event.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  approve\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Moves `amount` tokens from `sender` to `recipient` using the\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * allowance mechanism. `amount` is then deducted from the caller's\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * allowance.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Returns a boolean value indicating whether the operation succeeded.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits a \{Transfer\} event.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  transferFrom\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  sender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Emitted when `value` tokens are moved from one account (`from`) to\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * another (`to`).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Note that `value` may be zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 event\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  \cf11 \strokec11 indexed\cf4 \strokec4  from\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  \cf11 \strokec11 indexed\cf4 \strokec4  to\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * a call to \{approve\}. `value` is the new allowance.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 event\cf4 \strokec4  Approval\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  \cf11 \strokec11 indexed\cf4 \strokec4  owner\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  \cf11 \strokec11 indexed\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  value\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 /*\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @dev Provides information about the current execution context, including the\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * sender of the transaction and its data. While these are generally available\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * via msg.sender and msg.data, they should not be accessed in such a direct\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * manner, since when dealing with GSN meta-transactions the account sending and\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * paying for execution may not be the actual sender (as far as an application\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * is concerned).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * This contract is only required for intermediate, library-like contracts.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 contract\cf4 \strokec4  Context \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf7 \strokec7 // Empty internal constructor, to prevent people from mistakenly deploying\cf4 \cb1 \strokec4 \
\cb3   \cf7 \strokec7 // an instance of this contract, which should be used via inheritance.\cf4 \cb1 \strokec4 \
\cb3   \cf12 \strokec12 constructor\cf4 \strokec4  \cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \strokec4  \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  _msgSender\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  \cf8 \strokec8 payable\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 function\cf4 \strokec4  _msgData\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf13 \strokec13 bytes\cf4 \strokec4  \cf10 \strokec10 memory\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf14 \strokec14 this\cf6 \strokec6 ;\cf4 \strokec4  \cf7 \strokec7 // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf13 \strokec13 msg\cf6 \strokec6 .\cf4 \strokec4 data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 /**\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @dev Wrappers over Solidity's arithmetic operations with added overflow\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * checks.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * Arithmetic operations in Solidity wrap on overflow. This can easily result\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * in bugs, because programmers usually assume that an overflow raises an\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * error, which is the standard behavior in high level programming languages.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * `SafeMath` restores this intuition by reverting the transaction when an\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * operation overflows.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * Using this library instead of the unchecked operations eliminates an entire\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * class of bugs, so it's recommended to use it always.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 library\cf4 \strokec4  SafeMath \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the addition of two unsigned integers, reverting on\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `+` operator.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - Addition cannot overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  add\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 +\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 c \cf6 \strokec6 >=\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: addition overflow"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the subtraction of two unsigned integers, reverting on\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * overflow (when the result is negative).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `-` operator.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - Subtraction cannot overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  sub\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  sub\cf6 \strokec6 (\cf4 \strokec4 a\cf6 \strokec6 ,\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: subtraction overflow"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * overflow (when the result is negative).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `-` operator.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - Subtraction cannot overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  sub\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf4 \strokec4  errorMessage\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 b \cf6 \strokec6 <=\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  errorMessage\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 -\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the multiplication of two unsigned integers, reverting on\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `*` operator.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - Multiplication cannot overflow.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mul\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // benefit is lost if 'b' is also tested.\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\cf4 \cb1 \strokec4 \
\cb3     \cf11 \strokec11 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 a \cf6 \strokec6 ==\cf4 \strokec4  \cf5 \strokec5 0\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3       \cf9 \strokec9 return\cf4 \strokec4  \cf5 \strokec5 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 *\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 c \cf6 \strokec6 /\cf4 \strokec4  a \cf6 \strokec6 ==\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: multiplication overflow"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the integer division of two unsigned integers. Reverts on\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * division by zero. The result is rounded towards zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `/` operator. Note: this function uses a\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * `revert` opcode (which leaves remaining gas untouched) while Solidity\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * uses an invalid opcode to revert (consuming all remaining gas).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - The divisor cannot be zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  div\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  div\cf6 \strokec6 (\cf4 \strokec4 a\cf6 \strokec6 ,\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: division by zero"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * division by zero. The result is rounded towards zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `/` operator. Note: this function uses a\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * `revert` opcode (which leaves remaining gas untouched) while Solidity\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * uses an invalid opcode to revert (consuming all remaining gas).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - The divisor cannot be zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  div\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf4 \strokec4  errorMessage\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // Solidity only automatically asserts when dividing by 0\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 b \cf6 \strokec6 >\cf4 \strokec4  \cf5 \strokec5 0\cf6 \strokec6 ,\cf4 \strokec4  errorMessage\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 uint256\cf4 \strokec4  c \cf6 \strokec6 =\cf4 \strokec4  a \cf6 \strokec6 /\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf7 \strokec7 // assert(a == b * c + a % b); // There is no case in which this doesn't hold\cf4 \cb1 \strokec4 \
\
\cb3     \cf9 \strokec9 return\cf4 \strokec4  c\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Reverts when dividing by zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `%` operator. This function uses a `revert`\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * opcode (which leaves remaining gas untouched) while Solidity uses an\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * invalid opcode to revert (consuming all remaining gas).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - The divisor cannot be zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mod\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  mod\cf6 \strokec6 (\cf4 \strokec4 a\cf6 \strokec6 ,\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "SafeMath: modulo by zero"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Reverts with custom message when dividing by zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Counterpart to Solidity's `%` operator. This function uses a `revert`\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * opcode (which leaves remaining gas untouched) while Solidity uses an\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * invalid opcode to revert (consuming all remaining gas).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - The divisor cannot be zero.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mod\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  a\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  b\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf4 \strokec4  errorMessage\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf8 \strokec8 pure\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 b \cf6 \strokec6 !=\cf4 \strokec4  \cf5 \strokec5 0\cf6 \strokec6 ,\cf4 \strokec4  errorMessage\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  a \cf6 \strokec6 %\cf4 \strokec4  b\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 /**\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * @dev Contract module which provides a basic access control mechanism, where\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * there is an account (an owner) that can be granted exclusive access to\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * specific functions.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * By default, the owner account will be the one that deploys the contract. This\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * can later be changed with \{transferOwnership\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * This module is used through inheritance. It will make available the modifier\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * `onlyOwner`, which can be applied to your functions to restrict their use to\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  * the owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 contract\cf4 \strokec4  Ownable \cf2 \strokec2 is\cf4 \strokec4  Context \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 address\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _owner\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 event\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  \cf11 \strokec11 indexed\cf4 \strokec4  previousOwner\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  \cf11 \strokec11 indexed\cf4 \strokec4  newOwner\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Initializes the contract setting the deployer as the initial owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf12 \strokec12 constructor\cf4 \strokec4  \cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 address\cf4 \strokec4  msgSender \cf6 \strokec6 =\cf4 \strokec4  _msgSender\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3     _owner \cf6 \strokec6 =\cf4 \strokec4  msgSender\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  msgSender\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the address of the current owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  owner\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _owner\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Throws if called by any account other than the owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 modifier\cf4 \strokec4  onlyOwner\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 _owner \cf6 \strokec6 ==\cf4 \strokec4  _msgSender\cf6 \strokec6 (),\cf4 \strokec4  \cf15 \strokec15 "Ownable: caller is not the owner"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Leaves the contract without owner. It will not be possible to call\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * `onlyOwner` functions anymore. Can only be called by the current owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * NOTE: Renouncing ownership will leave the contract without an owner,\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * thereby removing any functionality that is only available to the owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  renounceOwnership\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  onlyOwner \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf4 \strokec4 _owner\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     _owner \cf6 \strokec6 =\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Transfers ownership of the contract to a new account (`newOwner`).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Can only be called by the current owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  transferOwnership\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  newOwner\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  onlyOwner \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _transferOwnership\cf6 \strokec6 (\cf4 \strokec4 newOwner\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Transfers ownership of the contract to a new account (`newOwner`).\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  _transferOwnership\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  newOwner\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 newOwner \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "Ownable: new owner is the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  OwnershipTransferred\cf6 \strokec6 (\cf4 \strokec4 _owner\cf6 \strokec6 ,\cf4 \strokec4  newOwner\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _owner \cf6 \strokec6 =\cf4 \strokec4  newOwner\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 contract\cf4 \strokec4  BEP20Token \cf2 \strokec2 is\cf4 \strokec4  Context\cf6 \strokec6 ,\cf4 \strokec4  IBEP20\cf6 \strokec6 ,\cf4 \strokec4  Ownable \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 using\cf4 \strokec4  SafeMath \cf16 \strokec16 for\cf4 \strokec4  \cf2 \strokec2 uint256\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 mapping\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  => \cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _balances\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 mapping\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  => \cf2 \strokec2 mapping\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  => \cf2 \strokec2 uint256\cf6 \strokec6 ))\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _allowances\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf2 \strokec2 uint256\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _totalSupply\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 uint8\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _decimals\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 string\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _symbol\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 string\cf4 \strokec4  \cf8 \strokec8 private\cf4 \strokec4  _name\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3   \cf12 \strokec12 constructor\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _name \cf6 \strokec6 =\cf4 \strokec4  \cf15 \strokec15 "Beecoin"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     _symbol \cf6 \strokec6 =\cf4 \strokec4  \cf15 \strokec15 "BEEC"\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     _decimals \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 8\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     _totalSupply \cf6 \strokec6 =\cf4 \strokec4  \cf5 \strokec5 10000000000000000\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     _balances\cf6 \strokec6 [\cf13 \strokec13 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _totalSupply\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf13 \strokec13 msg\cf6 \strokec6 .\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _totalSupply\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the bep token owner.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  getOwner\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 address\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  owner\cf6 \strokec6 ();\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the token decimals.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  decimals\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint8\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _decimals\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Returns the token symbol.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  symbol\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _symbol\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7   * @dev Returns the token name.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  name\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 string\cf4 \strokec4  \cf10 \strokec10 memory\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _name\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev See \{BEP20-totalSupply\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  totalSupply\cf6 \strokec6 ()\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _totalSupply\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev See \{BEP20-balanceOf\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  balanceOf\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  account\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ];\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev See \{BEP20-transfer\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `recipient` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - the caller must have a balance of at least `amount`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  transfer\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _transfer\cf6 \strokec6 (\cf4 \strokec4 _msgSender\cf6 \strokec6 (),\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf2 \strokec2 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev See \{BEP20-allowance\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  allowance\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  owner\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf8 \strokec8 view\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 uint256\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  _allowances\cf6 \strokec6 [\cf4 \strokec4 owner\cf6 \strokec6 ][\cf4 \strokec4 spender\cf6 \strokec6 ];\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev See \{BEP20-approve\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `spender` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  approve\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _approve\cf6 \strokec6 (\cf4 \strokec4 _msgSender\cf6 \strokec6 (),\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf2 \strokec2 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev See \{BEP20-transferFrom\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits an \{Approval\} event indicating the updated allowance. This is not\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * required by the EIP. See the note at the beginning of \{BEP20\};\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `sender` and `recipient` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `sender` must have a balance of at least `amount`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - the caller must have allowance for `sender`'s tokens of at least\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * `amount`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  transferFrom\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  sender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 external\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _transfer\cf6 \strokec6 (\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _approve\cf6 \strokec6 (\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  _msgSender\cf6 \strokec6 (),\cf4 \strokec4  _allowances\cf6 \strokec6 [\cf4 \strokec4 sender\cf6 \strokec6 ][\cf4 \strokec4 _msgSender\cf6 \strokec6 ()].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "BEP20: transfer amount exceeds allowance"\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf2 \strokec2 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Atomically increases the allowance granted to `spender` by the caller.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * This is an alternative to \{approve\} that can be used as a mitigation for\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * problems described in \{BEP20-approve\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits an \{Approval\} event indicating the updated allowance.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `spender` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  increaseAllowance\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  addedValue\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _approve\cf6 \strokec6 (\cf4 \strokec4 _msgSender\cf6 \strokec6 (),\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  _allowances\cf6 \strokec6 [\cf4 \strokec4 _msgSender\cf6 \strokec6 ()][\cf4 \strokec4 spender\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 addedValue\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf2 \strokec2 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Atomically decreases the allowance granted to `spender` by the caller.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * This is an alternative to \{approve\} that can be used as a mitigation for\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * problems described in \{BEP20-approve\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits an \{Approval\} event indicating the updated allowance.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `spender` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `spender` must have allowance for the caller of at least\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * `subtractedValue`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  decreaseAllowance\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  subtractedValue\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _approve\cf6 \strokec6 (\cf4 \strokec4 _msgSender\cf6 \strokec6 (),\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  _allowances\cf6 \strokec6 [\cf4 \strokec4 _msgSender\cf6 \strokec6 ()][\cf4 \strokec4 spender\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 subtractedValue\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "BEP20: decreased allowance below zero"\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf2 \strokec2 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Creates `amount` tokens and assigns them to `msg.sender`, increasing\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * the total supply.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `msg.sender` must be the token owner\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  mint\cf6 \strokec6 (\cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 public\cf4 \strokec4  onlyOwner \cf9 \strokec9 returns\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 bool\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _mint\cf6 \strokec6 (\cf4 \strokec4 _msgSender\cf6 \strokec6 (),\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf9 \strokec9 return\cf4 \strokec4  \cf2 \strokec2 true\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Moves tokens `amount` from `sender` to `recipient`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * This is internal function is equivalent to \{transfer\}, and can be used to\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * e.g. implement automatic token fees, slashing mechanisms, etc.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits a \{Transfer\} event.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `sender` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `recipient` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `sender` must have a balance of at least `amount`.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  _transfer\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  sender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 sender \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "BEP20: transfer from the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 recipient \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "BEP20: transfer to the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     _balances\cf6 \strokec6 [\cf4 \strokec4 sender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _balances\cf6 \strokec6 [\cf4 \strokec4 sender\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "BEP20: transfer amount exceeds balance"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _balances\cf6 \strokec6 [\cf4 \strokec4 recipient\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _balances\cf6 \strokec6 [\cf4 \strokec4 recipient\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf4 \strokec4 sender\cf6 \strokec6 ,\cf4 \strokec4  recipient\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /** @dev Creates `amount` tokens and assigns them to `account`, increasing\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * the total supply.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits a \{Transfer\} event with `from` set to the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `to` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  _mint\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 account \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "BEP20: mint to the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     _totalSupply \cf6 \strokec6 =\cf4 \strokec4  _totalSupply\cf6 \strokec6 .\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ].\cf4 \strokec4 add\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Destroys `amount` tokens from `account`, reducing the\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * total supply.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits a \{Transfer\} event with `to` set to the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `account` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `account` must have at least `amount` tokens.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  _burn\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 account \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "BEP20: burn from the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     _balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  _balances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "BEP20: burn amount exceeds balance"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _totalSupply \cf6 \strokec6 =\cf4 \strokec4  _totalSupply\cf6 \strokec6 .\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  Transfer\cf6 \strokec6 (\cf4 \strokec4 account\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * This is internal function is equivalent to `approve`, and can be used to\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * e.g. set automatic allowances for certain subsystems, etc.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Emits an \{Approval\} event.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * Requirements:\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `owner` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * - `spender` cannot be the zero address.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  _approve\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  owner\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 address\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 owner \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "BEP20: approve from the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf13 \strokec13 require\cf6 \strokec6 (\cf4 \strokec4 spender \cf6 \strokec6 !=\cf4 \strokec4  \cf2 \strokec2 address\cf6 \strokec6 (\cf5 \strokec5 0\cf6 \strokec6 ),\cf4 \strokec4  \cf15 \strokec15 "BEP20: approve to the zero address"\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\
\cb3     _allowances\cf6 \strokec6 [\cf4 \strokec4 owner\cf6 \strokec6 ][\cf4 \strokec4 spender\cf6 \strokec6 ]\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  amount\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 emit\cf4 \strokec4  Approval\cf6 \strokec6 (\cf4 \strokec4 owner\cf6 \strokec6 ,\cf4 \strokec4  spender\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\cb3   \cf7 \strokec7 /**\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7    * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * from the caller's allowance.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    *\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    * See \{_burn\} and \{_approve\}.\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7    */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 function\cf4 \strokec4  _burnFrom\cf6 \strokec6 (\cf2 \strokec2 address\cf4 \strokec4  account\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 uint256\cf4 \strokec4  amount\cf6 \strokec6 )\cf4 \strokec4  \cf8 \strokec8 internal\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     _burn\cf6 \strokec6 (\cf4 \strokec4 account\cf6 \strokec6 ,\cf4 \strokec4  amount\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     _approve\cf6 \strokec6 (\cf4 \strokec4 account\cf6 \strokec6 ,\cf4 \strokec4  _msgSender\cf6 \strokec6 (),\cf4 \strokec4  _allowances\cf6 \strokec6 [\cf4 \strokec4 account\cf6 \strokec6 ][\cf4 \strokec4 _msgSender\cf6 \strokec6 ()].\cf4 \strokec4 sub\cf6 \strokec6 (\cf4 \strokec4 amount\cf6 \strokec6 ,\cf4 \strokec4  \cf15 \strokec15 "BEP20: burn amount exceeds allowance"\cf6 \strokec6 ));\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
}